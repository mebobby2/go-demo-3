apiVersion: v1
kind: Pod
metadata:
  name: cd
  namespace: go-demo-3-build
spec:
  containers:
  - name: docker
    image: docker:18.03-git
    command: ["sleep"]
    args: ["100000"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
# we are mounting Docker socket so that the Docker client inside the container can issue
# commands to Docker server running on the host (uses Docker server running on the node).
# Otherwise, we would be running Docker-in-Docker, and that is not a very good idea.
    - name: docker-socket
      mountPath: /var/run/docker.sock
    workingDir: /workspace
  - name: kubectl
    image: vfarcic/kubectl
    command: ["sleep"]
    args: ["100000"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    workingDir: /workspace
  - name: oc
    image: vfarcic/openshift-client
    command: ["sleep"]
    args: ["100000"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    workingDir: /workspace
  - name: golang
    image: golang:1.12
    command: ["sleep"]
    args: ["100000"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    workingDir: /workspace
  serviceAccount: build
  volumes:
  - name: docker-socket
    hostPath:
      path: /var/run/docker.sock
      type: Socket
  - name: workspace
    emptyDir: {}

# The workspace volume is essentially shared amongst all the containers.
# This means the containers can potentially communicated (via files) using the shared volume.

# We'll accomplish two things with those volumes. On the one hand, all the containers
# will have a shared space so the artifacts generated through the actions we will perform
# in one will be available in the other. On the other hand, since emptyDir volume type
# exists only just as long as the Pod is running, it'll be deleted when we remove the Pod.
# As a result, we won't be leaving unnecessary garbage on our nodes or external drives.
